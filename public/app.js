import { getAmadeusToken, fetchCityIATA, fetchAmadeusFlights } from './amadeus.js';
import { fetchLocation, fetchAviasalesFlights } from './api.js';
import { renderFlights } from './render.js';

// ‚îÄ‚îÄ‚îÄ DOMContentLoaded –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
document.addEventListener("DOMContentLoaded", () => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initTelegram();
    initLanguageSwitcher();
    restoreLastTab();
    initFocus(lastTab);
    fadeInBody();
    initRatingInputValidation();

    // üéØ –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
    const form = document.getElementById('search-form');
    const fromInput = document.getElementById('from');
    const toInput = document.getElementById('to');
    const departureInput = document.getElementById('departureDate');

    if (!form || !fromInput || !toInput || !departureInput) {
      throw new Error("‚ùå –û–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }

// ‚úàÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–±–º–∏—Ç–∞ —Ñ–æ—Ä–º—ã
form.addEventListener('submit', async (e) => {
  e.preventDefault();

  const fromCity = fromInput.value.trim();
  const toCity = toInput.value.trim();
  const date = departureInput.value.trim();

  // ‚õΩ –ü–æ–ª—É—á–∞–µ–º IATA –∫–æ–¥—ã —á–µ—Ä–µ–∑ Amadeus
  const fromIATA = await fetchCityIATA(fromCity);
  const toIATA = await fetchCityIATA(toCity);

  if (!fromIATA || !toIATA) {
    console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ IATA –∫–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤", { fromCity, toCity });
    return;
  }

  const rawFlights = await fetchAmadeusFlights(fromIATA.code, toIATA.code, date);
  const flights = rawFlights.filter(f => f.origin && f.destination && f.departure_at);
  renderFlights(flights);

  trackEvent("–ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤", {
    from: fromIATA.code,
    to: toIATA.code,
    departureDate: date,
    count: flights.length,
    isRoundTrip: false,
  });
});

// üì¶ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
trackEvent("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", {
  lang: window._appLang,
  timestamp: new Date().toISOString(),
});

// üîç –î–æ—Å—Ç—É–ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
window.fetchLocation = fetchLocation;
window.fetchAviasalesFlights = fetchAviasalesFlights;

// ‚îÄ‚îÄ‚îÄ Telegram WebApp Init ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function initTelegram() {
  if (window.Telegram && Telegram.WebApp) {
    Telegram.WebApp.ready();
    const user = Telegram.WebApp.initDataUnsafe?.user;
    if (user?.id) {
      window._telegramId = user.id.toString();
      console.log("‚úÖ Telegram ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", window._telegramId);
    } else {
      console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID");
    }
  }
}

// ‚îÄ‚îÄ‚îÄ –Ø–∑—ã–∫ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function initLanguageSwitcher() {
  window._appLang = localStorage.getItem("lang") || "ru";
  applyTranslations(window._appLang);

  const langSwitcher = document.getElementById("langSwitcher");
  if (langSwitcher) {
    langSwitcher.value = window._appLang;
    langSwitcher.addEventListener("change", (e) => {
      const newLang = e.target.value;
      window._appLang = newLang;
      localStorage.setItem("lang", newLang);
      applyTranslations(newLang);
      trackEvent("–°–º–µ–Ω–∞ —è–∑—ã–∫–∞", newLang);
    });
  }
}

// ‚îÄ‚îÄ‚îÄ –í–∫–ª–∞–¥–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
let lastTab = localStorage.getItem("activeTab") || "flights";

function restoreLastTab() {
  if (lastTab === "sights") {
    lastTab = "places";
    localStorage.setItem("activeTab", "places");
  }
  showTab(lastTab);
}

// ‚îÄ‚îÄ‚îÄ –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function initFocus(tab) {
  setTimeout(() => {
    if (typeof window.focusFirstInputIn === "function") {
      window.focusFirstInputIn(tab);
    } else {
      console.warn("‚ö†Ô∏è focusFirstInputIn –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞");
    }
  }, 200);
}

// ‚îÄ‚îÄ‚îÄ –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function fadeInBody() {
  setTimeout(() => {
    document.body.classList.remove("opacity-0");
  }, 100);
}

// ‚îÄ‚îÄ‚îÄ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function initRatingInputValidation() {
  const ratingInput = document.getElementById("minRating");
  if (!ratingInput) return;

  ratingInput.addEventListener("input", () => {
    let val = parseInt(ratingInput.value);
    if (val > 10) ratingInput.value = 10;
    if (val < 0 || isNaN(val)) ratingInput.value = '';
  });

  ratingInput.addEventListener("keydown", (e) => {
    const invalidKeys = ["e", "E", "+", "-", ".", ","];
    if (invalidKeys.includes(e.key)) {
      e.preventDefault();
    }
  });
}

// ‚îÄ‚îÄ‚îÄ –ß–µ–∫–±–æ–∫—Å "–¢—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ" ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const roundTripCheckbox = document.getElementById("roundTrip");
const returnDateWrapper = document.getElementById("returnDateWrapper");
const returnDateInput = document.getElementById("returnDate");

if (roundTripCheckbox && returnDateWrapper && returnDateInput) {
  const updateReturnDateVisibility = () => {
    returnDateWrapper.classList.toggle("hidden", !roundTripCheckbox.checked);
    returnDateInput.required = roundTripCheckbox.checked;
    if (!roundTripCheckbox.checked) returnDateInput.value = "";
  };

  roundTripCheckbox.checked = localStorage.getItem("roundTripChecked") === "1";
  updateReturnDateVisibility();

  roundTripCheckbox.addEventListener("change", () => {
    updateReturnDateVisibility();
    localStorage.setItem("roundTripChecked", roundTripCheckbox.checked ? "1" : "0");
  });
}

// ‚îÄ‚îÄ‚îÄ –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–µ–ª–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const hotelFiltersToggle = document.getElementById("toggleFilters");
const hotelFiltersSection = document.getElementById("hotelFilters");

if (hotelFiltersToggle && hotelFiltersSection) {
  const toggleVisibility = () => {
    const isVisible = hotelFiltersToggle.checked;
    hotelFiltersSection.classList.toggle("hidden", !isVisible);
    if (isVisible) setTimeout(updatePriceTooltip, 100);
  };

  hotelFiltersToggle.addEventListener("change", toggleVisibility);
  toggleVisibility();
}

// ‚îÄ‚îÄ‚îÄ –ü–æ–ª–∑—É–Ω–æ–∫ —Ü–µ–Ω—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const priceRange = document.getElementById("priceRange");
if (priceRange) {
  priceRange.value = 250;
  priceRange.addEventListener("input", updatePriceTooltip);
  window.addEventListener("resize", updatePriceTooltip);
  window.addEventListener("load", updatePriceTooltip);
}

// ‚îÄ‚îÄ‚îÄ –ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const hotelCityInput = document.getElementById("hotelCity");

if (hotelCityInput) {
  const cachedCity = localStorage.getItem("lastHotelCity");
  if (cachedCity) hotelCityInput.value = cachedCity;

  hotelCityInput.setAttribute("autofocus", "autofocus");

  document.getElementById("hotelForm")?.addEventListener("submit", (e) => {
    e.preventDefault();
    showLoading();

    const city = hotelCityInput.value.trim();
    localStorage.setItem("lastHotelCity", city);

    const maxPrice = parseFloat(priceRange.value) || Infinity;
    const minRating = parseFloat(document.getElementById("minRating").value) || 0;

    fetch("https://go-travel-backend.vercel.app/api/hotels")
      .then(res => res.json())
      .then(hotels => {
        const filtered = hotels.filter(h =>
          h.price <= maxPrice &&
          h.rating >= minRating &&
          (!city || h.city.toLowerCase().includes(city.toLowerCase()))
        );

        const t = translations[window._appLang];
        const resultBlock = document.getElementById("hotelsResult");
        resultBlock.classList.remove("visible");

        resultBlock.innerHTML = `<h3 class='font-semibold mb-2'>${t.hotelResults}</h3>` + (
          filtered.length ? filtered.map(h => {
            const hotelId = `${h.name}-${h.city}-${h.price}`;
            const favHotels = JSON.parse(localStorage.getItem("favorites_hotels") || "[]");
            const isFav = favHotels.some(fav => fav.name === h.name && fav.city === h.city && fav.price === h.price);

            return `
              <div class="card bg-white border p-4 rounded-xl mb-2 opacity-0 scale-95 transform transition-all duration-300">
                <strong>${h.name}</strong> (${h.city})<br>
                –¶–µ–Ω–∞: $${h.price} / –Ω–æ—á—å<br>
                –†–µ–π—Ç–∏–Ω–≥: ${h.rating}
                <div class="flex justify-between items-center mt-2">
                  <button class="btn text-sm bg-blue-600 text-white rounded px-3 py-1" onclick="bookHotel('${h.name}', '${h.city}', ${h.price}, ${h.rating})">${t.bookNow}</button>
                  <button 
                    onclick='toggleFavoriteHotel(${JSON.stringify(h)}, this)' 
                    class="text-xl ml-2"
                    data-hotel-id="${hotelId}">
                    ${isFav ? "üíô" : "ü§ç"}
                  </button>
                </div>
              </div>
            `;
          }).join("") : `<p class='text-sm text-gray-500'>${t.noHotelsFound}</p>`
        );

        updateHotelHearts();
        resultBlock.classList.add("visible");
        animateCards("#hotelsResult .card");

        trackEvent("–ü–æ–∏—Å–∫ –æ—Ç–µ–ª—è", {
          city,
          maxPrice,
          minRating,
          resultCount: filtered.length
        });

        hideLoading();
      })
      .catch(err => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–µ–ª–µ–π:", err);
        document.getElementById("hotelsResult").innerHTML = "<p class='text-sm text-red-500'>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–µ–ª–µ–π.</p>";
        hideLoading();
      });
  });
}

// ‚îÄ‚îÄ‚îÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π —Ä–µ–π—Å–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if (fromInput && toInput && departureInput) {
  fromInput.value = localStorage.getItem("lastFrom") || "";
  toInput.value = localStorage.getItem("lastTo") || "";
  departureInput.value = localStorage.getItem("lastDepartureDate") || "";
  fromInput.setAttribute("autofocus", "autofocus");
}
    
// ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
document.getElementById("search-form")?.addEventListener("submit", async (e) => {
  e.preventDefault();

  const from = fromInput.value.trim();
  const to = toInput.value.trim();
  const departureDate = departureInput.value;
  const isRoundTrip = document.getElementById("roundTrip").checked;
  const returnDate = document.getElementById("returnDate")?.value;

  // ‚îÄ‚îÄ‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  if (!from || !to || !departureDate || (isRoundTrip && !returnDate)) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
    return;
  }

  // ‚îÄ‚îÄ‚îÄ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ localStorage ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  localStorage.setItem("lastFrom", from);
  localStorage.setItem("lastTo", to);
  localStorage.setItem("lastDepartureDate", departureDate);
  if (isRoundTrip) localStorage.setItem("lastReturnDate", returnDate);

  showLoading();

  try {
    // üîê –ü–æ–ª—É—á–∞–µ–º access token –¥–ª—è Amadeus
    const token = await getAmadeusToken();

    // üîç –ò—â–µ–º IATA-–∫–æ–¥—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –≥–æ—Ä–æ–¥–æ–≤
    const fromCode = await fetchCityIATA(from, token);
    const toCode = await fetchCityIATA(to, token);

    console.log("üìç IATA:", fromCode, toCode);

    if (!fromCode || !toCode) {
      alert("–ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      return;
    }

// ‚úàÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–π—Å—ã —Ç—É–¥–∞
let departureFlights = await fetchAmadeusFlights(fromCode.code, toCode.code, departureDate, token);
console.log("üõ´ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤ —Ç—É–¥–∞ (Amadeus):", departureFlights);

// üîÅ Fallback –Ω–∞ Aviasales, –µ—Å–ª–∏ Amadeus –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª
if (!Array.isArray(departureFlights) || !departureFlights.length) {
  console.warn("üîÅ Fallback: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–π—Å—ã –∏–∑ Aviasales");
  const fallback = await fetchAviasalesFlights(fromCode.code, toCode.code, departureDate);

  if (Array.isArray(fallback) && fallback[0]?.departure_at) {
    departureFlights = fallback;
    console.log("üõ´ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤ —Ç—É–¥–∞ (Aviasales):", departureFlights);
  } else {
    console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Aviasales:", fallback);
    departureFlights = [];
  }
}

let returnFlights = [];
if (isRoundTrip) {
  returnFlights = await fetchAmadeusFlights(toCode.code, fromCode.code, returnDate, token);
  console.log("üõ¨ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ (Amadeus):", returnFlights);

  if (!Array.isArray(returnFlights) || !returnFlights.length) {
    console.warn("üîÅ Fallback: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Ä–µ–π—Å—ã –∏–∑ Aviasales");
    const fallbackReturn = await fetchAviasalesFlights(toCode.code, fromCode.code, returnDate);

    if (Array.isArray(fallbackReturn) && fallbackReturn[0]?.departure_at) {
      returnFlights = fallbackReturn;
      console.log("üõ¨ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ (Aviasales):", returnFlights);
    } else {
      console.warn("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Aviasales:", fallbackReturn);
      returnFlights = [];
    }
  }
}

const container = document.getElementById("hotDeals");
container.innerHTML = "";
  
if (departureFlights?.length) {
  const title = document.createElement("h3");
  title.textContent = "–†–µ–π—Å—ã —Ç—É–¥–∞:";
  title.className = "text-lg font-semibold mb-2 mt-4";
  container.appendChild(title);
  renderFlights(departureFlights);
}

if (isRoundTrip && returnFlights?.length) {
  const titleBack = document.createElement("h3");
  titleBack.textContent = "–†–µ–π—Å—ã –æ–±—Ä–∞—Ç–Ω–æ:";
  titleBack.className = "text-lg font-semibold mb-2 mt-4";
  container.appendChild(titleBack);
  renderFlights(returnFlights);
}

if (!departureFlights?.length && (!isRoundTrip || !returnFlights?.length)) {
  container.innerHTML = `<div class="text-center text-gray-500 mt-4">–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
  Telegram.WebApp.sendData?.("üò¢ –†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
} else {
  Telegram.WebApp.sendData?.(`‚úàÔ∏è –ù–∞–π–¥–µ–Ω—ã —Ä–µ–π—Å—ã: ${from} ‚Üí ${to}${isRoundTrip ? " –∏ –æ–±—Ä–∞—Ç–Ω–æ" : ""}`);
}

trackEvent("–ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤", {
  from,
  to,
  departureDate,
  returnDate: isRoundTrip ? returnDate : null,
  isRoundTrip,
  count: (departureFlights.length || 0) + (returnFlights.length || 0)
});

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–π—Å–æ–≤:", err);
    Telegram.WebApp.sendData?.("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Å–æ–≤.");
    trackEvent("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Å–æ–≤", err.message);
  } finally {
    hideLoading();
  }
});

// ‚îÄ‚îÄ‚îÄ –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–π—Å–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
document.getElementById('clearFlights')?.addEventListener('click', () => {
  fromInput.value = '';
  toInput.value = '';
  departureInput.value = '';
  document.getElementById('returnDate').value = '';
  document.getElementById('roundTrip').checked = false;

  document.getElementById('returnDateWrapper')?.classList.add('hidden');
  document.getElementById('hotDeals').innerHTML = '';

  localStorage.removeItem("lastFrom");
  localStorage.removeItem("lastTo");
  localStorage.removeItem("lastDepartureDate");
  localStorage.removeItem("lastReturnDate");

  fromInput.focus();

  trackEvent?.("–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–π—Å–æ–≤", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–±—Ä–æ—Å–∏–ª –ø–æ–ª—è –∏ –∫—ç—à");
});

// ‚îÄ‚îÄ‚îÄ –ü–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const placeCityInput = document.getElementById("placeCity");
const placeCategorySelect = document.getElementById("placeCategory");
const resultBlock = document.getElementById("placesResult");

if (placeCityInput) {
  const cachedCity = localStorage.getItem("placeCity");
  if (cachedCity) placeCityInput.value = cachedCity;
  placeCityInput.addEventListener("input", (e) => {
    localStorage.setItem("placeCity", e.target.value.trim());
  });
}

if (placeCategorySelect) {
  const cachedCategory = localStorage.getItem("placeCategory");
  if (cachedCategory) placeCategorySelect.value = cachedCategory;
  placeCategorySelect.addEventListener("change", (e) => {
    localStorage.setItem("placeCategory", e.target.value);
  });
}

placeCityInput?.setAttribute("autofocus", "autofocus");

document.getElementById("placeForm")?.addEventListener("submit", (e) => {
  e.preventDefault();

  const city = placeCityInput.value.trim().toLowerCase();
  const category = placeCategorySelect.value;

  localStorage.setItem("placeCity", city);
  localStorage.setItem("placeCategory", category);

  const dummyPlaces = [
    { name: "Castelo de S√£o Jorge", description: "–î—Ä–µ–≤–Ω—è—è –∫—Ä–µ–ø–æ—Å—Ç—å —Å –≤–∏–¥–æ–º –Ω–∞ –õ–∏—Å—Å–∞–±–æ–Ω", city: "–ª–∏—Å—Å–∞–±–æ–Ω", category: "culture", image: "https://picsum.photos/300/180?random=1" },
    { name: "Miradouro da Senhora do Monte", description: "–õ—É—á—à–∏–π –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–π –≤–∏–¥ –Ω–∞ –≥–æ—Ä–æ–¥", city: "–ª–∏—Å—Å–∞–±–æ–Ω", category: "nature", image: "https://picsum.photos/300/180?random=2" },
    { name: "Ocean√°rio de Lisboa", description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–∫–µ–∞–Ω–∞—Ä–∏—É–º", city: "–ª–∏—Å—Å–∞–±–æ–Ω", category: "fun", image: "https://picsum.photos/300/180?random=3" },
    { name: "Time Out Market", description: "–§—É–¥–∫–æ—Ä—Ç –∏ —Ä—ã–Ω–æ–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞", city: "–ª–∏—Å—Å–∞–±–æ–Ω", category: "food", image: "https://picsum.photos/300/180?random=4" },
    { name: "Centro Colombo", description: "–ö—Ä—É–ø–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä", city: "–ª–∏—Å—Å–∞–±–æ–Ω", category: "shopping", image: "https://picsum.photos/300/180?random=5" }
  ];

  resultBlock.classList.remove("visible");
  resultBlock.innerHTML = "";

  const filtered = dummyPlaces.filter(p =>
    (!city || p.city.includes(city)) &&
    (!category || p.category === category)
  );

  if (filtered.length === 0) {
    resultBlock.innerHTML = `<p class="text-sm text-gray-500">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>`;
    return;
  }

  const firstBatch = filtered.slice(0, 3);
  const remaining = filtered.slice(3);

  renderPlaces(firstBatch, resultBlock);

  if (remaining.length > 0) {
    const moreBtn = document.createElement("button");
    moreBtn.textContent = "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë";
    moreBtn.className = "btn w-full mt-4 bg-blue-500 text-white text-sm rounded py-2 px-4";

    moreBtn.addEventListener("click", () => {
      renderPlaces(remaining, resultBlock);
      animateCards("#placesResult .card");
      updateHearts("places");
      moreBtn.remove();

      setTimeout(() => {
        resultBlock.querySelectorAll(".card")[3]?.scrollIntoView({ behavior: "smooth", block: "start" });
      }, 100);
    });

    resultBlock.appendChild(moreBtn);
  }

  resultBlock.classList.add("visible");
  animateCards("#placesResult .card");

  trackEvent("–ü–æ–∏—Å–∫ –º–µ—Å—Ç", { city, category });
});

// ‚îÄ‚îÄ‚îÄ –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ—Å—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function renderPlaces(places, container) {
  const t = translations?.[window._appLang] || {};
  const favPlaces = JSON.parse(localStorage.getItem("favorites_places") || "[]");

  const html = places.map(p => {
    const isFav = favPlaces.some(fav => fav.name === p.name && fav.city === p.city);
    return `
      <div class="card bg-white p-4 rounded-xl shadow hover:shadow-md transition-all duration-300 opacity-0 transform scale-95">
        <img src="${p.image}" alt="${p.name}" class="w-full h-40 object-cover rounded-md mb-3" />
        <h3 class="text-lg font-semibold mb-1">${p.name}</h3>
        <p class="text-sm text-gray-600 mb-1">${p.description}</p>
        <p class="text-sm text-gray-500">${formatCategory(p.category)} ‚Ä¢ ${capitalize(p.city)}</p>
        <div class="flex justify-between items-center mt-2">
          <button class="btn mt-2 px-3 py-1 bg-blue-600 text-white text-sm rounded">üìç –ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
          <button 
            onclick="toggleFavoritePlaceFromEncoded('${encodeURIComponent(JSON.stringify(p))}', this)" 
            class="text-xl ml-2"
            data-place-id="${encodeURIComponent(JSON.stringify(p))}">
            ${isFav ? "üíô" : "ü§ç"}
          </button>
        </div>
      </div>
    `;
  }).join("");

  container.insertAdjacentHTML("beforeend", html);
}

// ‚îÄ‚îÄ‚îÄ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function formatCategory(cat) {
  const map = {
    culture: "–ö—É–ª—å—Ç—É—Ä–∞",
    nature: "–ü—Ä–∏—Ä–æ–¥–∞",
    fun: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    food: "–ï–¥–∞",
    shopping: "–®–æ–ø–∏–Ω–≥"
  };
  return map[cat] || cat;
}

function animateCards(selector) {
  const cards = document.querySelectorAll(selector);
  cards.forEach((card, i) => {
    setTimeout(() => {
      card.classList.remove("opacity-0", "scale-95");
      card.classList.add("opacity-100", "scale-100");
    }, i * 100);
  });
}

function updateHearts(type) {
  const items = document.querySelectorAll(`[data-${type.slice(0, -1)}-id]`);
  const storage = JSON.parse(localStorage.getItem(`favorites_${type}`) || "[]");

  items.forEach(item => {
    const data = decodeURIComponent(item.dataset[`${type.slice(0, -1)}Id`]);
    const parsed = JSON.parse(data);
    const isFav = storage.some(f => f.name === parsed.name && f.city === parsed.city);
    item.innerHTML = isFav ? "üíô" : "ü§ç";
  });
}

function toggleFavoritePlaceFromEncoded(encoded, element) {
  const place = JSON.parse(decodeURIComponent(encoded));
  const key = "favorites_places";
  const favs = JSON.parse(localStorage.getItem(key) || "[]");

  const exists = favs.find(f => f.name === place.name && f.city === place.city);
  const updated = exists ? favs.filter(f => !(f.name === place.name && f.city === place.city)) : [...favs, place];

  localStorage.setItem(key, JSON.stringify(updated));
  element.innerHTML = exists ? "ü§ç" : "üíô";

  trackEvent("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", {
    type: "place",
    action: exists ? "remove" : "add",
    place: place.name,
  });
}
// ‚îÄ‚îÄ‚îÄ –õ–æ–≥ –≤—ã—Ö–æ–¥–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
window.addEventListener("beforeunload", () => {
  const duration = Math.round((Date.now() - window.appStart) / 1000);
  logEventToAnalytics("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", { duration_seconds: duration });
});
