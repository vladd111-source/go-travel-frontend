import { renderHotels, renderFlights, renderPlaces } from './render.js';
import { fetchPlaces, showLoading, hideLoading, askGptAdvisor } from './globals.js';
import { parsePlacesFromGpt } from './globals.js';

export async function searchHotels(city, checkIn, checkOut) {
  try {
    const query = new URLSearchParams({ city, checkIn, checkOut });

    const res = await fetch(`https://go-travel-backend.vercel.app/api/hotels?${query.toString()}`);

    if (!res.ok) {
      const errText = await res.text();
      alert(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–µ–ª–µ–π: ${res.status} ‚Äî ${errText}`);
      throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${res.status} ‚Äî ${errText}`);
    }

    const hotels = await res.json();
    return Array.isArray(hotels) ? hotels : [];
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–µ–ª–µ–π:", err.message || err);
    alert(`‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–µ–ª–µ–π:\n${err.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
    return [];
  }
}

let lastSearchTime = 0;

// üîÅ –ü–æ–≤—Ç–æ—Ä –ø—Ä–∏ 429 (–±–µ–∑ async/await)
function retryFetch(url, options = {}, retries = 6, backoff = 2000) {
  return new Promise((resolve, reject) => {
    function attempt(tryIndex, currentDelay) {
      fetch(url, options)
        .then(res => {
          if (res.status !== 429) {
            resolve(res);
          } else if (tryIndex < retries - 1) {
            console.warn(`‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä (${tryIndex + 1}) –∏–∑-–∑–∞ 429`);
            setTimeout(() => attempt(tryIndex + 1, currentDelay * 1.5), currentDelay);
          } else {
            reject(new Error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–æ–≤)"));
          }
        })
        .catch(err => {
          if (tryIndex < retries - 1) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–≤—Ç–æ—Ä (${tryIndex + 1})`, err);
            setTimeout(() => attempt(tryIndex + 1, currentDelay * 1.5), currentDelay);
          } else {
            reject(err);
          }
        });
    }

    attempt(0, backoff);
  });
}


async function getIataCode(cityName) {
  try {
    const url = `https://autocomplete.travelpayouts.com/places2?term=${encodeURIComponent(cityName)}&locale=ru&types[]=city`;
    const res = await fetch(url);
    const data = await res.json();
    return data?.[0]?.code || null;
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IATA-–∫–æ–¥–∞:", err);
    return null;
  }
}



// ‚úÖ DOMContentLoaded –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener("DOMContentLoaded", () => {
  try {
    // ‚úÖ Telegram init
    if (window.Telegram && Telegram.WebApp) {
      Telegram.WebApp.ready();
      console.log("üì¶ initDataUnsafe:", Telegram.WebApp.initDataUnsafe);
      const user = Telegram.WebApp.initDataUnsafe?.user;
      if (user && user.id) {
        window._telegramId = user.id.toString();
        console.log("‚úÖ Telegram ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", window._telegramId);
      } else {
        console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID");
      }
    }

    // ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
    window._appLang = localStorage.getItem("lang") || "ru";
    applyTranslations(window._appLang);

    const langSwitcher = document.getElementById("langSwitcher");
    if (langSwitcher) {
      langSwitcher.value = window._appLang;
      langSwitcher.addEventListener("change", (e) => {
        window._appLang = e.target.value;
        localStorage.setItem("lang", window._appLang);
        applyTranslations(window._appLang);
        trackEvent("–°–º–µ–Ω–∞ —è–∑—ã–∫–∞", window._appLang);
      });
    }

    // ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    let lastTab = localStorage.getItem("activeTab") || "flights";
    if (lastTab === "sights") {
      lastTab = "places";
      localStorage.setItem("activeTab", "places");
    }
    showTab(lastTab);

    // ‚úÖ –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ
    setTimeout(() => {
      if (typeof window.focusFirstInputIn === "function") {
        window.focusFirstInputIn(lastTab);
      } else {
        console.warn("‚ö†Ô∏è focusFirstInputIn –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞");
      }
    }, 200);

    // ‚úÖ –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
    setTimeout(() => {
      document.body.classList.remove("opacity-0");
    }, 100);

    // üí° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    const ratingInput = document.getElementById("minRating");
    if (ratingInput) {
      ratingInput.addEventListener("input", () => {
        let val = parseInt(ratingInput.value);
        if (val > 10) ratingInput.value = 10;
        if (val < 0 || isNaN(val)) ratingInput.value = '';
      });

      ratingInput.addEventListener("keydown", (e) => {
        const invalidKeys = ["e", "E", "+", "-", ".", ","];
        if (invalidKeys.includes(e.key)) {
          e.preventDefault();
        }
      });
    }

    // üìä –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
    trackEvent("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", {
      lang: window._appLang,
      timestamp: new Date().toISOString(),
    });
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", e);
  }
});

// ‚úÖ –õ–æ–≥–∏–∫–∞ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ "–¢—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ"
const roundTripCheckbox = document.getElementById("roundTrip");
const returnDateWrapper = document.getElementById("returnDateWrapper");
const returnDateInput = document.getElementById("returnDate");

if (roundTripCheckbox && returnDateWrapper && returnDateInput) {
  function updateReturnDateVisibility() {
    const show = roundTripCheckbox.checked;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ
    returnDateWrapper.classList.toggle("hidden", !show);

    if (show) {
      returnDateInput.removeAttribute("disabled");
      returnDateInput.setAttribute("required", "true");
      returnDateInput.setAttribute("name", "returnDate");
    } else {
      returnDateInput.setAttribute("disabled", "true");
      returnDateInput.removeAttribute("required");
      returnDateInput.removeAttribute("name");
      returnDateInput.value = ""; // —Å–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è
    }
  }

  // üëá –°–¥–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ —Å–∞–±–º–∏—Ç–µ —Ñ–æ—Ä–º—ã
  window.updateReturnDateVisibility = updateReturnDateVisibility;

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ localStorage
  const saved = localStorage.getItem("roundTripChecked");
  if (saved === "1") roundTripCheckbox.checked = true;

  updateReturnDateVisibility(); // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

  // ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞
  const departureDateInput = document.getElementById("departureDate");
  if (departureDateInput && returnDateInput) {
    departureDateInput.addEventListener("change", () => {
      const depValue = departureDateInput.value;
      if (depValue) {
        returnDateInput.setAttribute("min", depValue);
        if (returnDateInput.value && returnDateInput.value < depValue) {
          returnDateInput.value = "";
        }
      }
    });
  }

  roundTripCheckbox.addEventListener("change", () => {
    updateReturnDateVisibility();
    localStorage.setItem("roundTripChecked", roundTripCheckbox.checked ? "1" : "0");
  });
}

// ‚úÖ –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
const hotelFiltersToggle = document.getElementById("toggleFilters");
const hotelFiltersSection = document.getElementById("hotelFilters");

if (hotelFiltersToggle && hotelFiltersSection) {
  const toggleVisibility = () => {
    const isVisible = hotelFiltersToggle.checked;
    hotelFiltersSection.classList.toggle("hidden", !isVisible);
    if (isVisible) {
      setTimeout(updatePriceTooltip, 100);
    }
  };

  hotelFiltersToggle.addEventListener("change", toggleVisibility);
  toggleVisibility();
}

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–∑—É–Ω–∫–∞ –∏ tooltip
const priceRange = document.getElementById("priceRange");
if (priceRange) {
  priceRange.value = 250;
  priceRange.addEventListener("input", updatePriceTooltip);
  window.addEventListener("resize", updatePriceTooltip);
  window.addEventListener("load", updatePriceTooltip);
}

// ‚úÖ –ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π
const hotelCityInput = document.getElementById("hotelCity");

if (hotelCityInput) {
  const cachedCity = localStorage.getItem("lastHotelCity");
  if (cachedCity) hotelCityInput.value = cachedCity;

  hotelCityInput.setAttribute("autofocus", "autofocus");

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
document.getElementById('hotelForm').addEventListener('submit', async (e) => {
  e.preventDefault();

  const city = document.getElementById('hotelCity')?.value.trim();
  const checkIn = document.getElementById('checkIn')?.value;
  const checkOut = document.getElementById('checkOut')?.value;

  if (!city) {
    alert('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥');
    return;
  }

  if (!checkIn || !checkOut) {
    alert("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –∏ –≤—ã–µ–∑–¥–∞");
    return;
  }

  const now = new Date();
  const dateIn = new Date(checkIn);
  const dateOut = new Date(checkOut);

  if (dateIn < now.setHours(0, 0, 0, 0)) {
    alert("‚õî –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º");
    return;
  }

  if (dateOut <= dateIn) {
    alert("‚õî –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞");
    return;
  }

  showLoading();

  try {
   const hotelsRaw = await searchHotels(city, checkIn, checkOut);
console.log("üì¶ Hotels from API (raw):", hotelsRaw);

// –ü—Ä–∞–≤–∫–∞: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ hotelId –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
  const dateIn = new Date(checkIn);
const dateOut = new Date(checkOut);
const nights = Math.max(1, (dateOut - dateIn) / (1000 * 60 * 60 * 24));


    
const hotels = hotelsRaw
  .filter(h => (h.hotelId || h.id)) // ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –Ω–µ —Ü–µ–Ω–∞
  .map(h => {
    const hotelId = h.hotelId || h.id;
    const rawPrice = h.priceFrom || h.fullPrice || h.minPrice || 0;

    return {
      id: hotelId,
      hotelId,
      name: h.hotelName || h.name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
      city: h.city || h.location?.name || city || "–ì–æ—Ä–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
      fullPrice: rawPrice,
      pricePerNight: nights > 0 ? rawPrice / nights : rawPrice,
      rating: h.rating || (h.stars ? h.stars * 2 : 0),
      image: h.image || `https://photo.hotellook.com/image_v2/crop/${hotelId}/2048/1536.auto`,
      property_type: h.property_type || ""
    };
  })
  .filter(h => h.fullPrice > 0); // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏


    
    renderHotels(hotels);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π:', err);
    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  } finally {
    hideLoading();
  }
});
}


// ‚úÖ –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ (–≤–∫–ª—é—á–∞—è "–¢—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ")
document.getElementById("search-form")?.addEventListener("submit", async (e) => {
   e.preventDefault();
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å returnDate –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
window.updateReturnDateVisibility?.();
  const isHotOnly = document.getElementById("hotOnly")?.checked;

  if (isHotOnly) {
    const fromInput = document.getElementById("from");
    const from = fromInput?.value.trim().toUpperCase();

    if (!from) {
      alert("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.");
      return;
    }

    localStorage.setItem("lastFrom", from);
    await loadHotDeals(); // —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É —Ç–µ–±—è
    return;
  }
  const fromInput = document.getElementById("from");
  const toInput = document.getElementById("to");
  const departureInput = document.getElementById("departureDate");
  const returnInput = document.getElementById("returnDate");
  const roundTripCheckbox = document.getElementById("roundTrip");

  const fromCity = fromInput?.value.trim();
  const toCity = toInput?.value.trim();
  const departureDate = departureInput?.value;
  const returnDate = returnInput?.value;
  const isRoundTrip = roundTripCheckbox?.checked;

  if (!fromCity || !toCity || !departureDate || (isRoundTrip && !returnDate)) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º IATA –∫–æ–¥—ã —á–µ—Ä–µ–∑ API
  const from = fromCity.length === 3 ? fromCity.toUpperCase() : await getIataCode(fromCity);
  const to = toCity.length === 3 ? toCity.toUpperCase() : await getIataCode(toCity);

  if (!from || !to) {
    alert("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IATA-–∫–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.");
    return;
  }

  const now = Date.now();
  if (now - lastSearchTime < 1000) {
    alert("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.");
    return;
  }
  lastSearchTime = now;

  localStorage.setItem("lastFrom", fromCity);
  localStorage.setItem("lastTo", toCity);
  localStorage.setItem("lastDepartureDate", departureDate);
  if (isRoundTrip) {
    localStorage.setItem("lastReturnDate", returnDate);
  }

  showLoading();
  const hotDeals = document.getElementById("hotDeals");
  hotDeals.innerHTML = "";

  let flightsOut = [];
  let flightsBack = [];

  const encode = str => encodeURIComponent(str.trim());

try {
  // ‚úàÔ∏è –ó–∞–ø—Ä–æ—Å —Ä–µ–π—Å–æ–≤ —Ç—É–¥–∞
  const urlOut = `https://go-travel-backend.vercel.app/api/flights?from=${encode(from)}&to=${encode(to)}&date=${departureDate}`;
  const resOut = await retryFetch(urlOut);
  if (!resOut.ok) throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–π—Å–æ–≤ —Ç—É–¥–∞: ${resOut.status}`);
  flightsOut = await resOut.json();
  await renderFlights(flightsOut, from, to, "–†–µ–π—Å—ã —Ç—É–¥–∞", "hotDeals", true); // –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

  // üîÅ –ó–∞–ø—Ä–æ—Å —Ä–µ–π—Å–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ
  if (isRoundTrip && returnDate) {
    await new Promise(r => setTimeout(r, 1200)); // –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    const urlBack = `https://go-travel-backend.vercel.app/api/flights?from=${encode(to)}&to=${encode(from)}&date=${returnDate}`;
    const resBack = await retryFetch(urlBack);
    if (!resBack.ok) throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–π—Å–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ: ${resBack.status}`);
    flightsBack = await resBack.json();
    await renderFlights(flightsBack, to, from, "–†–µ–π—Å—ã –æ–±—Ä–∞—Ç–Ω–æ", "hotDeals", false); // –ù–ï –æ—á–∏—â–∞–µ–º
  }

  // üì≤ Telegram WebApp –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
  if (Array.isArray(flightsOut) && flightsOut.length > 0) {
    const top = flightsOut[0];
    const msg = `‚úàÔ∏è –ù–∞—à–ª–∏ —Ä–µ–π—Å\nüõ´ ${top.origin || top.from || "?"} ‚Üí üõ¨ ${top.destination || top.to || "?"}\nüìÖ ${top.date || top.departure_at?.split("T")[0] || "?"}\nüí∞ $${top.price || top.value || "?"}`;
    Telegram.WebApp?.sendData?.(msg);
    trackEvent("–ü–æ–∏—Å–∫ —Ä–µ–π—Å–∞", msg);
  } else {
    Telegram.WebApp?.sendData?.("üò¢ –†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
    trackEvent("–ü–æ–∏—Å–∫ —Ä–µ–π—Å–∞", "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
  }

} catch (err) {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Å–æ–≤:", err);
  Telegram.WebApp?.sendData?.("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Å–æ–≤.");
  trackEvent("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Å–æ–≤", err.message);

} finally {
  hideLoading();
}
});
// ‚úÖ –ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ MOW –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞)
document.getElementById("loadHotDeals")?.addEventListener("click", async () => {
  await loadHotDeals(); // –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
});

// üß† –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä—è—á–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–ø–æ –≥–æ—Ä–æ–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
async function loadHotDeals() {
  showLoading();
  try {
    const fromInput = document.getElementById("from");
    const fromCity = fromInput?.value.trim();

    if (!fromCity) {
      alert("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.");
      hideLoading();
      return;
    }

    const origin = fromCity.length === 3 ? fromCity.toUpperCase() : await getIataCode(fromCity);

    if (!origin) {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IATA-–∫–æ–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.");
      hideLoading();
      return;
    }

    localStorage.setItem("lastFrom", origin);

    const url = `https://go-travel-backend.vercel.app/api/hot-deals?origin=${origin}`;
    const res = await fetch(url);
    const { deals, title } = await res.json();

    renderFlights(deals, origin, "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", title || "üî• –ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ hot deals:", err);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.");
  } finally {
    hideLoading();
  }
}

// üßº –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å"
document.getElementById("clearFlights")?.addEventListener("click", () => {
  document.getElementById("from").value = "";
  document.getElementById("to").value = "";
  document.getElementById("departureDate").value = "";
  document.getElementById("returnDate").value = "";
  document.getElementById("roundTrip").checked = false;

  document.getElementById("hotDeals").innerHTML = "";

  localStorage.removeItem("lastFrom");
  localStorage.removeItem("lastTo");
  localStorage.removeItem("lastDepartureDate");
  localStorage.removeItem("lastReturnDate");

  console.log("üßº –û—á–∏—â–µ–Ω–æ: –ø–æ–ª—è, localStorage, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã");
});

// ‚úÖ –ü–æ–∏—Å–∫ –º–µ—Å—Ç
const placeCityInput = document.getElementById("placeCity");
const placeMoodSelect = document.getElementById("placeMood");
const resultBlock = document.getElementById("placesResult");

if (placeCityInput) {
  const cachedCity = localStorage.getItem("placeCity");
  if (cachedCity) placeCityInput.value = cachedCity;
  placeCityInput.addEventListener("input", (e) => {
    localStorage.setItem("placeCity", e.target.value.trim());
  });
}

if (placeMoodSelect) {
  const cachedMood = localStorage.getItem("placeMood");
  if (cachedMood) placeMoodSelect.value = cachedMood;
  placeMoodSelect.addEventListener("change", (e) => {
    localStorage.setItem("placeMood", e.target.value);
  });
}

placeCityInput.setAttribute("autofocus", "autofocus");

document.getElementById("placeForm")?.addEventListener("submit", async (e) => {
  e.preventDefault();

  const city = placeCityInput.value.trim().toLowerCase();
  const mood = placeMoodSelect.value;

  localStorage.setItem("placeCity", city);
  localStorage.setItem("placeMood", mood);

  resultBlock.classList.remove("visible");
  resultBlock.innerHTML = "";

  try {
    const gptRaw = await askGptAdvisor(`
–¢—ã –º–µ—Å—Ç–Ω—ã–π –∏–Ω—Å–∞–π–¥–µ—Ä, –∑–Ω–∞–µ—à—å —Å–∞–º—ã–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ, –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏ —Ä–µ–¥–∫–∏–µ —Ç–æ—á–∫–∏. –°–æ—Å—Ç–∞–≤—å –ø–æ–¥–±–æ—Ä–∫—É –¥–ª—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–≥–æ –¥–Ω—è –≤ –≥–æ—Ä–æ–¥–µ "${city}" –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ "${mood}". 

–í–∫–ª—é—á–∏:
‚Äî —Ç–æ–ø–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã, 
‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞, 
‚Äî —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å).

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–æ–π:
1. –ù–∞–∑–≤–∞–Ω–∏–µ
–û–ø–∏—Å–∞–Ω–∏–µ: ...
–ê–¥—Ä–µ—Å (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ): ...
–§–æ—Ç–æ (—Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ .jpg –∏–ª–∏ .png, –±–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –∏ –±–µ–∑ example.com): https://...

–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ —Å–ø–∏—Å–∫–∞. –¢–æ–ª—å–∫–æ 3 –∫–∞—Ä—Ç–æ—á–∫–∏.`);

    const parsedPlaces = parsePlacesFromGpt(gptRaw).slice(0, 3);

    const gptCardsArr = [];

    for (const p of parsedPlaces) {
      const favPlaces = JSON.parse(localStorage.getItem("favorites_places") || "[]");
      const isFav = favPlaces.some(fav => fav.name === p.name && fav.city === city);

      const { url: imageUrl } = await getUnsplashImage(`${p.name} ${city}`);

      const mapLink = p.address
        ? `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(p.address)}`
        : "#";

      gptCardsArr.push(`
        <div class="card bg-white p-4 rounded-xl shadow hover:shadow-md transition-all duration-300 opacity-0 transform scale-95">
          <img 
            src="${imageUrl}" 
            alt="${p.name}" 
            class="w-full h-40 object-cover rounded-md mb-3 bg-gray-100"
            referrerpolicy="no-referrer"
            loading="lazy"
            onerror="this.onerror=null;this.src='https://placehold.co/300x180?text=No+Image';"
          />
          <h3 class="text-lg font-semibold mb-1">${p.name}</h3>
          <p class="text-sm text-gray-600 mb-1">${p.description}</p>
          <a href="${mapLink}" target="_blank" class="text-sm text-blue-600 underline">
            ${p.address || "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"}
          </a>
          <div class="flex justify-between items-center mt-2">
            <a href="${mapLink}" target="_blank" class="btn mt-2 px-3 py-1 bg-blue-600 text-white text-sm rounded">
              üìç –ü–æ–¥—Ä–æ–±–Ω–µ–µ
            </a>
            <button 
              onclick="toggleFavoritePlaceFromEncoded('${encodeURIComponent(JSON.stringify({ ...p, city, mood }))}', this)" 
              class="text-xl ml-2"
            >
              ${isFav ? "üíô" : "ü§ç"}
            </button>
          </div>
        </div>
      `);
    }

    resultBlock.innerHTML = gptCardsArr.join("");
    animateCards("#placesResult .card");
    updateHearts("places");
    Telegram.WebApp?.sendData?.(`üåç –ú–µ—Å—Ç–∞ –≤ ${city}, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ "${mood}" –ø–æ–ª—É—á–µ–Ω—ã`);
  } catch (err) {
    console.warn("‚ùå GPT –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Å—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã:", err);
    resultBlock.innerHTML = `<p class="text-sm text-gray-500">–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>`;
  }

  resultBlock.classList.add("visible");
  trackEvent("–ü–æ–∏—Å–∫ –º–µ—Å—Ç", { city, mood });
});


// ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
window.addEventListener("beforeunload", () => {
  const duration = Math.round((Date.now() - window.appStart) / 1000);
  logEventToAnalytics("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", { duration_seconds: duration });
});

document.getElementById("hotOnly")?.addEventListener("change", (e) => {
  const isChecked = e.target.checked;

  // –ù–∞—Ö–æ–¥–∏–º –æ–±—ë—Ä—Ç–∫–∏ (—Ä–æ–¥–∏—Ç–µ–ª–∏ input'–æ–≤)
  const toGroup = document.getElementById("to")?.parentElement;
  const departureGroup = document.getElementById("departureDate")?.parentElement;
  const returnGroup = document.getElementById("returnDate")?.parentElement;
  const roundTripGroup = document.getElementById("roundTrip")?.parentElement;
  const clearBtn = document.getElementById("clearFlights");

  const toggle = (el, show) => {
    if (el) el.style.display = show ? "" : "none";
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã
  toggle(toGroup, !isChecked);
  toggle(departureGroup, !isChecked);
  toggle(returnGroup, !isChecked);
  toggle(roundTripGroup, !isChecked);
  toggle(clearBtn, !isChecked);

  // ‚úÇÔ∏è required
  const toInput = document.getElementById("to");
  const departureInput = document.getElementById("departureDate");

  if (isChecked) {
    toInput?.removeAttribute("required");
    departureInput?.removeAttribute("required");
  } else {
    toInput?.setAttribute("required", "true");
    departureInput?.setAttribute("required", "true");
  }
});
