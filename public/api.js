// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π backend (–æ–±—Ö–æ–¥ CORS)
export async function fetchAviasalesFlights(from, to, date) {
  const url = `https://go-travel-backend.vercel.app/api/flights?from=${from}&to=${to}&date=${date}`;

  try {
    const res = await fetch(url);
    const data = await res.json();

    console.log("üì¶ –û—Ç–≤–µ—Ç –æ—Ç backend:", data);

    // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç
    if (Array.isArray(data)) {
      return data;
    } else if (data && typeof data === "object") {
      return Object.values(data);
    } else {
      console.warn("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:", data);
      return [];
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Å–æ–≤ —Å backend:", err.message || err);
    return [];
  }
}

// ‚úÖ –£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ Aviasales (TravelPayouts) API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
export async function fetchLocation(query) {
  const url = `https://autocomplete.travelpayouts.com/places2?term=${encodeURIComponent(query)}&locale=ru&types[]=city`;

  const normalize = (s) => (s || "").trim().toLowerCase();
  const normQuery = normalize(query);

  try {
    console.log("üîç –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞:", query);
    const res = await fetch(url);
    const data = await res.json();

    console.log("üì¶ –û—Ç–≤–µ—Ç –æ—Ç API:", data);

    // 1. –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ name/code
    let match = data.find(item =>
      (normalize(item.name) === normQuery || normalize(item.code) === normQuery) &&
      item.code
    );

    // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∏—â–µ–º –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é –≤ name, city_name, code
    if (!match) {
      match = data.find(item =>
        (normalize(item.name).includes(normQuery) ||
         normalize(item.city_name)?.includes(normQuery) ||
         normalize(item.code) === normQuery) &&
        item.code
      );
    }

    if (!match) {
      console.warn("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω:", query);
      return null;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥: ${match.name || match.city_name} (${match.code})`);
    return {
      code: match.code
    };
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞:', err);
    return null;
  }
}

// ‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ ‚Äî –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ —á–µ—Ä–µ–∑ Skyscanner
export async function fetchFlights(fromCode, fromId, toCode, toId) {
  const url = `https://skyscanner89.p.rapidapi.com/flights/one-way/list?origin=${fromCode}&originId=${fromId}&destination=${toCode}&destinationId=${toId}`;

  const options = {
    method: 'GET',
    headers: {
      'X-RapidAPI-Key': '61654e8ea8msh81fd1f2e412c216p164556jsne7c3bbe401bf',
      'X-RapidAPI-Host': 'skyscanner89.p.rapidapi.com'
    }
  };

  try {
    const res = await fetch(url, options);
    return await res.json();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Å–æ–≤:', err);
    return null;
  }
}
