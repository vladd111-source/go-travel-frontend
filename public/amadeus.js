// üî§ –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Å –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É
function transliterate(text) {
  const map = {
    –ê: "A", –ë: "B", –í: "V", –ì: "G", –î: "D", –ï: "E", –Å: "E", –ñ: "Zh", –ó: "Z", –ò: "I", –ô: "Y",
    –ö: "K", –õ: "L", –ú: "M", –ù: "N", –û: "O", –ü: "P", –†: "R", –°: "S", –¢: "T", –£: "U", –§: "F",
    –•: "Kh", –¶: "Ts", –ß: "Ch", –®: "Sh", –©: "Shch", –™: "", –´: "Y", –¨: "", –≠: "E", –Æ: "Yu", –Ø: "Ya",
    –∞: "a", –±: "b", –≤: "v", –≥: "g", –¥: "d", –µ: "e", —ë: "e", –∂: "zh", –∑: "z", –∏: "i", –π: "y",
    –∫: "k", –ª: "l", –º: "m", –Ω: "n", –æ: "o", –ø: "p", —Ä: "r", —Å: "s", —Ç: "t", —É: "u", —Ñ: "f",
    —Ö: "kh", —Ü: "ts", —á: "ch", —à: "sh", —â: "shch", —ä: "", —ã: "y", —å: "", —ç: "e", —é: "yu", —è: "ya"
  };
  return text.split('').map(char => map[char] || char).join('');
}

// üß† –†—É—á–Ω–æ–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
const manualMap = {
  "–ü—Ä–∞–≥–∞": "Prague",
  "–í–∞—Ä—à–∞–≤–∞": "Warsaw",
  "–ö–∏–µ–≤": "Kyiv",
  "–ú—é–Ω—Ö–µ–Ω": "Munich",
  "–ö–æ–ø–µ–Ω–≥–∞–≥–µ–Ω": "Copenhagen",
  "–ù–µ–∞–ø–æ–ª—å": "Naples"
};

// üîê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç Amadeus
export async function getAmadeusToken() {
  const clientId = "10UMyGcxHVsK1sK8x1U8MCqgR7g1LuDo";
  const clientSecret = "0bXLQrqxEAyFjdkx";

  const response = await fetch("https://test.api.amadeus.com/v1/security/oauth2/token", {
    method: "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    body: new URLSearchParams({
      grant_type: "client_credentials",
      client_id: clientId,
      client_secret: clientSecret
    })
  });

  const data = await response.json();
  return data.access_token;
}

// üåç –ü–æ–∏—Å–∫ IATA-–∫–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ (—á–µ—Ä–µ–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã)
export async function fetchCityIATA(cityName) {
  const token = await getAmadeusToken();
  const mapped = manualMap[cityName] || cityName;
  const translit = transliterate(mapped);

  const url = `https://test.api.amadeus.com/v1/reference-data/locations?keyword=${encodeURIComponent(translit)}&subType=AIRPORT`;

  try {
    const res = await fetch(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Accept-Language": "ru"
      }
    });

    const data = await res.json();
    const airport = data?.data?.find(loc => loc.iataCode && loc.subType === "AIRPORT");

    if (!airport) {
      console.warn("‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Amadeus:", cityName);
      return null;
    }

    return {
      code: airport.iataCode.toUpperCase().trim(),
      name: airport.name
    };
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IATA:", err);
    return null;
  }
}

// ‚úàÔ∏è –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ —á–µ—Ä–µ–∑ Amadeus API
export async function fetchAmadeusFlights(from, to, date) {
  const token = await getAmadeusToken();

  const cleanFrom = from?.toUpperCase().trim();
  const cleanTo = to?.toUpperCase().trim();
  const cleanDate = typeof date === "string" && date.match(/^\d{4}-\d{2}-\d{2}$/) ? date : null;

  if (!cleanFrom || !cleanTo || !cleanDate) {
    console.warn("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–π—Å–æ–≤", { from, to, date });
    return [];
  }

  const payload = {
    currencyCode: "USD",
    originLocationCode: cleanFrom,
    destinationLocationCode: cleanTo,
    departureDate: cleanDate,
    adults: 1
    // ‚ùå –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º `max`: —ç—Ç–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
  };

  try {
    console.log("üì§ –ó–∞–ø—Ä–æ—Å –≤ Amadeus:", JSON.stringify(payload, null, 2));

    const response = await fetch("https://test.api.amadeus.com/v2/shopping/flight-offers", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`
      },
      body: JSON.stringify(payload)
    });

    const text = await response.text();

    if (!response.ok) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ Amadeus API ${response.status}:`, text);
      return [];
    }

    const data = JSON.parse(text);

    if (!data?.data?.length) {
      console.warn("‚ö†Ô∏è –†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Amadeus:", data);
      return [];
    }

    return data.data.map(offer => ({
      from: cleanFrom,
      to: cleanTo,
      date: cleanDate,
      airline: offer.validatingAirlineCodes?.[0] || "‚Äî",
      price: offer.price?.total || "‚Äî"
    }));
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Amadeus:", err);
    return [];
  }
}
