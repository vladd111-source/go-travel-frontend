const cityNameCache = {};

export async function getCityName(iata, lang = "ru") {
  const cacheKey = `${iata}_${lang}`;
  if (cityNameCache[cacheKey]) return cityNameCache[cacheKey];

  try {
    const url = `https://autocomplete.travelpayouts.com/places2?term=${iata}&locale=${lang}&types[]=city`;
    const res = await fetch(url);
    const data = await res.json();

    const match = data.find(item => item.code === iata);
    const name = match?.name || iata;
    cityNameCache[cacheKey] = name;
    return name;
  } catch (err) {
    console.warn("üåê –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞:", iata, err);
    return iata;
  }
}

export function generateAviasalesLink(flight) {
  const rawDate = flight.departure_at || flight.date || "";
  if (!rawDate) {
    console.warn("‚ùå –ù–µ—Ç –¥–∞—Ç—ã —É —Ä–µ–π—Å–∞:", flight);
    return "#";
  }

  const dateParts = rawDate.split("T")[0]?.split("-");
  if (!dateParts || dateParts.length !== 3) {
    console.warn("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞:", rawDate);
    return "#";
  }

  const [year, month, day] = dateParts;
  const formattedDate = `${day}${month}`;

  let fromCode = (flight.from || flight.origin || "").trim().toUpperCase();
  let toCode = (flight.to || flight.destination || "").trim().toUpperCase();

  if (fromCode.length !== 3 || toCode.length !== 3) {
    console.warn("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ IATA –∫–æ–¥—ã:", { fromCode, toCode });
    return "#";
  }

  return `https://www.aviasales.ru/search/${fromCode}${formattedDate}${toCode}1?marker=618281`;
}

export async function renderFlights(
  flights,
  fromCity = "‚Äî",
  toCity = "‚Äî",
  title = "",
  containerId = "hotDeals",
  clear = true
) {
  const container = document.getElementById(containerId);
  if (clear) container.innerHTML = "";

  if (title) {
    const heading = document.createElement("h3");
    heading.className = "text-lg font-semibold mt-4 mb-2";
    heading.textContent = title;
    container.appendChild(heading);
  }

  if (!flights || !flights.length) {
    container.innerHTML += `<div class="text-center text-gray-500 mt-4">–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
    return;
  }

  const favorites = JSON.parse(localStorage.getItem("favorites_flights") || "[]");
  const lang = localStorage.getItem("lang") || "ru";

  const topDeals = [...flights]
    .sort((a, b) => (a.price || a.value || 0) - (b.price || b.value || 0))
    .slice(0, 10);

 for (const flight of topDeals) {
  const fromCode = flight.from || flight.origin || "‚Äî";
  const toCode = flight.to || flight.destination || "‚Äî";

  const from = await getCityName(fromCode, lang);
  const to = await getCityName(toCode, lang);

  const rawDate = flight.date || flight.departure_at || "";
  const date = rawDate.split("T")[0] || "‚Äî";
  const departureTime = window.formatTime(flight.departure_at);

  // ‚úÖ –î–æ–±–∞–≤—å —ç—Ç–æ: –µ—Å–ª–∏ duration –Ω–µ –∑–∞–¥–∞–Ω, –Ω–æ –µ—Å—Ç—å return_at –∏ departure_at ‚Äî —Ä–∞—Å—Å—á–∏—Ç–∞–π
  if (!flight.duration && flight.return_at && flight.departure_at) {
    const dep = new Date(flight.departure_at);
    const ret = new Date(flight.return_at);
    flight.duration = Math.round((ret - dep) / 60000); // –≤ –º–∏–Ω—É—Ç–∞—Ö
  }

  // üîß –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
  let arrivalTime = "‚Äî";
  if (flight.departure_at && flight.duration) {
    const departure = new Date(flight.departure_at);
    const arrival = new Date(departure.getTime() + flight.duration * 60000);
    arrivalTime = window.formatTime(arrival.toISOString());
  }
    const durationText = window.formatDuration(flight.duration || flight.duration_to || flight.duration_minutes);
    const airline = flight.airline || "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è";
    const rawPrice = flight.price || flight.value || 0;
    const price = parseFloat(rawPrice);

    const link = generateAviasalesLink(flight);

    const dealData = { from: fromCode, to: toCode, date, price };
    const dealId = encodeURIComponent(JSON.stringify(dealData));

    const isFav = favorites.some(f =>
      f.from === from && f.to === to && f.date === date && parseFloat(f.price) === price
    );

    const isHot = flight.highlight || price < 60;

    const card = document.createElement("div");
    card.className = `
      card border p-4 rounded-xl mb-2 opacity-0 scale-95 transform transition-all duration-300
      ${isHot ? 'bg-yellow-100 border-yellow-300' : 'bg-white'}
    `.trim();

    card.innerHTML = `
      <h3 class="text-lg font-semibold mb-1">${airline}</h3>
      <div class="text-sm text-gray-600 mb-1">üõ´ ${from} ‚Üí üõ¨ ${to}</div>
      <div class="text-sm text-gray-600 mb-1">üìÖ ${date}</div>
      <div class="text-sm text-gray-600 mb-1">‚è∞ –í—Ä–µ–º—è: ${departureTime} ‚Äî ${arrivalTime}</div>
      <div class="text-sm text-gray-600 mb-1">üïí –í –ø—É—Ç–∏: ${durationText}</div>
      <div class="text-sm text-gray-600 mb-1">üí∞ $${price}</div>
      ${isHot ? `<div class="text-xs text-orange-600 mt-1">üî• –ì–æ—Ä—è—á–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</div>` : ""}
      <div class="flex justify-between items-center gap-2 mt-2">
        <a href="${link}" target="_blank"
           class="btn bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium py-2 px-4 rounded transition text-center">
           –ü–µ—Ä–µ–π—Ç–∏ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
        </a>
        <button 
          onclick="toggleFavoriteFlight('${dealId}', this)" 
          class="text-2xl text-center text-gray-600 hover:text-blue-600 transition"
          data-flight-id="${dealId}">
          ${isFav ? "üíô" : "ü§ç"}
        </button>
      </div>
    `;

    container.appendChild(card);

    // ‚ù§Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    if (container.id === "favContent-flights") {
      if (!flight.departure_at) {
        flight.departure_at = flight.date || "";
      }

      const aviaLink = generateAviasalesLink(flight);

      const moreBtn = document.createElement("a");
      moreBtn.textContent = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ";
      moreBtn.href = aviaLink;
      moreBtn.target = "_blank";
      moreBtn.className = "btn bg-blue-600 hover:bg-blue-700 text-white text-sm py-2 px-4 rounded transition w-full text-center block mt-2";

      card.appendChild(moreBtn);
    }

    if (typeof animateCards === "function") {
      animateCards(`#${container.id} .card`);
    }
  }
}

export function renderHotels(hotels) {
  const container = document.getElementById("hotelsResult");
  container.innerHTML = "";

  if (!hotels || !hotels.length) {
    container.innerHTML = `<div class="text-center text-gray-500 mt-4">–û—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
    return;
  }

  hotels.forEach(hotel => {
    const card = document.createElement("div");
    card.className = "card bg-white p-4 rounded-xl shadow mb-4";

    card.innerHTML = `
      <h3 class="text-lg font-semibold mb-1">${hotel.name}</h3>
      <p class="text-sm text-gray-600 mb-1">üìç ${hotel.city}</p>
      <p class="text-sm text-gray-600 mb-1">‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${hotel.rating}</p>
      <p class="text-sm text-gray-600 mb-1">üí∞ –¶–µ–Ω–∞: $${hotel.price}</p>
    `;

    container.appendChild(card);
  });
}

export function renderPlaces(places) {
  const container = document.getElementById("placesResult");
  container.innerHTML = "";

  if (!places || !places.length) {
    container.innerHTML = `<div class="text-center text-gray-500 mt-4">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>`;
    return;
  }

  places.forEach(place => {
    const card = document.createElement("div");
    card.className = "card bg-white p-4 rounded-xl shadow mb-4";

    card.innerHTML = `
      <h3 class="text-lg font-semibold mb-1">${place.name}</h3>
      <p class="text-sm text-gray-600 mb-1">üìç ${place.city}</p>
      <p class="text-sm text-gray-600 mb-1">üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${place.category}</p>
      <p class="text-sm text-gray-600 mb-1">üìù ${place.description}</p>
    `;

    container.appendChild(card);
  });
}
// –°–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
window.generateAviasalesLink = generateAviasalesLink;
